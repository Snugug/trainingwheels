#!/usr/bin/python

DOCUMENTATION = '''
---
module: mongodb_user
short_description: Adds or removes a user from a MongoDB database.
description:
  - Adds or removes a user from a MongoDB database.
version_added: "0.X"
options:
  name:
    description:
      - name of the user to add or remove
    required: true
    default: null
  password:
    description:
      - set the user's password
    required: false
    default: null
  login_user:
    description:
      - The username used to authenticate with
    required: false
    default: null
  login_password:
    description:
      - The password used to authenticate with
    required: false
    default: null
  login_host:
    description:
      - Host running the database
    required: false
    default: localhost
  login_port
    description:
      - The port to connect to
    required: false
    default: 27017
  state:
    state:
    description:
      - The database state
    required: false
    default: present
    choices: [ "present", "absent" ]
examples:
  - code: "mongodb_user: database=burgers name=bob password=12345 state=present"
    description: Create 'burgers' database user with name 'bob' and password '12345'.
  - code: "mongodb_user: database=burgers name=bob state=absent"
    description: Delete 'burgers' database user with name 'bob'.
notes:
  - Requires the pymongo Python package on teh remote host, version 2.4.2+. This
    can be installed using pip. @see http://api.mongodb.org/python/current/installation.html
requirements: [ "pymongo" ]
author: Elliott Foster
'''

import ConfigParser
try:
    from pymongo import MongoClient
    from pymongo.errors import ConnectionFailure
except ImportError:
    pymongo_found = False
else:
    pymongo_found = True

# =========================================
# MongoDB module specific support methods.
#

def user_add(client, db_name, user, password):
    db = client[db_name]
    db.add_user(user, password)
    return True

def user_remove(client, db_name, user):
    db = client[db_name]
    return db.remove_user(user)

# =========================================
# Module execution.
#

def main():
    module = AnsibleModule(
        argument_spec = dict(
            login_user=dict(default=None),
            login_password=dict(default=None),
            login_host=dict(default='localhost'),
            login_port=dict(default='27017'),
            database=dict(required=True, aliases=['db']),
            user=dict(required=True, aliases=['name']),
            password=dict(aliases=['pass']),
            state=dict(default='present', choices=['absent', 'present']),
        )
    )

    if not pymongo_found:
        module.fail_json(msg='the python pymongo module is required')

    login_user = module.params['login_user']
    login_password = module.params['login_password']
    login_host = module.params['login_host']
    login_port = module.params['login_port']
    db_name = module.params['database']
    user = module.params['user']
    password = module.params['password']
    state = module.params['state']

    try:
        client = MongoClient(login_host, int(login_port))
        if login_user is not None and login_password is not None:
          admin_db = client.admin
          admin_db.authenticate(login_user, login_password)
        elif login_password is None and login_user is not None:
            module.fail_json(msg='when supplying login arguments, both login_user and login_password must be provided')

    except ConnectionFailure:
        module.fail_json(msg='unable to connect to database, check login_user and login_password are correct')

    if state == 'present':
        if password is None:
            module.fail_json(msg='password parameter required when adding a user')
        changed = user_add(client, db_name, user, password)
    elif state == 'absent':
        changed = user_remove(client, db_name, user)

    module.exit_json(changed=changed, user=user)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
