#!/usr/bin/python

# (c) 2012, Mark Theunissen <mark.theunissen@gmail.com>
# Sponsored by Four Kitchens http://fourkitchens.com.
#
# This file is part of the Aurai application, providing commands
# for use in Training Wheels.
#
# Aurai is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Aurai is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Aurai.  If not, see <http://www.gnu.org/licenses/>.

#
# Usage:
#
# action=usercreate user=bob passwd=12345
#   Create a user with the name 'bob' and password '12345'
#

import pwd

# ===========================================
# Support methods.
#

def user_exists(user):
    try:
        if pwd.getpwnam(user):
            return True
    except KeyError:
        return False

def dir_exists(path):
    if os.path.lexists(path):
        if not os.path.islink(path) and not os.path.isfile(path):
            return True
    return False

def shell_exec(cmd,shell=False):
    call = subprocess.Popen(cmd, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = call.communicate()
    if call.returncode == 0:
        return 0, ''
    else:
        return call.returncode, out+err

def user_create(module,user,passwd):
    if user_exists(user):
        module.fail_json(msg="the user already exists, cannot create")
    if not dir_exists("/opt/trainingwheels/skel/skel_user"):
        module.fail_json(msg="skel files not found, please put them in /opt/trainingwheels/skel/skel_user")
    shell_exec(["/usr/sbin/groupadd",user])
    shell_exec(["/usr/bin/rsync","-a","--delete","/opt/trainingwheels/skel/skel_user/","/tmp/skel_user/"])
    shell_exec("/bin/echo %s > /tmp/skel_user/.password" % passwd, True)
    useradd_dir = "-d/home/%s" % user
    useradd_group = "-g%s" % user
    shell_exec(["/usr/sbin/useradd","-m",useradd_dir,"-k/tmp/skel_user","-s/bin/bash",useradd_group,user])
    shell_exec("echo %s:%s | chpasswd" % (user,passwd),True)
    shell_exec(["chmod","o-rwx","/home/%s" % user])
    shell_exec(["rm","-rf","/tmp/skel_user"])

def user_delete(user):
    shell_exec(["/usr/sbin/userdel",user])
    shell_exec(["/usr/sbin/groupdel",user])
    shell_exec(["rm","-rf","/home/%s" % user])

# ===========================================
# Module execution.
#

def main():
    module = AnsibleModule(
        argument_spec = dict(
            action=dict(required=True),
            user=dict(default=None),
            passwd=dict(default=None)
        )
    )
    action = module.params["action"]
    user = module.params["user"]
    passwd = module.params["passwd"]

    if action == "usercreate":
        if user is not None and passwd is not None:
            user_create(module,user,passwd)
        else:
            module.fail_json(msg="user and passwd required when creating a user")
    elif action == "userdel":
        if user is not None:
            user_delete(user)
        else:
            module.fail_json(msg="user required when deleting a user")
    else:
        module.fail_json(msg="unknown action")

    module.exit_json(msg="finished")


# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
