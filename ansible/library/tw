#!/usr/bin/python

# (c) 2012, Mark Theunissen <mark.theunissen@gmail.com>
# Sponsored by Four Kitchens http://fourkitchens.com.
#
# This file is part of the Aurai application, providing commands
# for use in Training Wheels.
#
# Aurai is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Aurai is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Aurai.  If not, see <http://www.gnu.org/licenses/>.

#
# Usage:
#
# action=usercreate user=bob passwd=12345
#   Create a user with the name 'bob' and password '12345'
#

import pwd

# ===========================================
# Support methods.
#

def user_exists(user):
    try:
        if pwd.getpwnam(user):
            return True
    except KeyError:
        return False

def dir_exists(path):
    if os.path.lexists(path):
        if not os.path.islink(path) and not os.path.isfile(path):
            return True
    return False

def shell_exec(cmd,shell=False):
    call = subprocess.Popen(cmd, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = call.communicate()
    if call.returncode == 0:
        return 0, out
    else:
        return call.returncode, out+err

def user_create(module,user,passwd):
    if user_exists(user):
        module.fail_json(msg="the user already exists, cannot create")
    if not dir_exists("/opt/trainingwheels/skel/skel_user"):
        module.fail_json(msg="skel files not found, please put them in /opt/trainingwheels/skel/skel_user")
    shell_exec(["/usr/sbin/groupadd",user])
    shell_exec(["/usr/bin/rsync","-a","--delete","/opt/trainingwheels/skel/skel_user/","/tmp/skel_user/"])
    shell_exec("/bin/echo %s > /tmp/skel_user/.password" % passwd, True)
    useradd_dir = "-d/home/%s" % user
    useradd_group = "-g%s" % user
    shell_exec(["/usr/sbin/useradd","-m",useradd_dir,"-k/tmp/skel_user","-s/bin/bash",useradd_group,user])
    shell_exec("echo %s:%s | chpasswd" % (user,passwd),True)
    shell_exec(["chmod","o-rwx","/home/%s" % user])
    shell_exec(["rm","-rf","/tmp/skel_user"])

def user_delete(user):
    shell_exec(["/usr/sbin/userdel",user])
    shell_exec(["/usr/sbin/groupdel",user])
    shell_exec(["rm","-rf","/home/%s" % user])

def user_get_id(user):
    try:
        pw = pwd.getpwnam(user)
        uid = pw.pw_uid
        return uid
    except KeyError:
        return False

def user_remove_from_group(user, group):
    shell_exec(["/usr/bin/gpasswd","-d",user,group])

def user_is_logged_in(user):
    res, out = shell_exec("users")
    userlist = out.strip().split(" ")
    if user in userlist:
        return True
    return False

def user_get_all():
    res, out = shell_exec(["ls","/home"])
    userlist = out.strip().split("\n")
    for user in userlist:
        if not user_exists(user):
            userlist.remove(user)
    return userlist

def mysql_dump_to_file(db,path,gzip):
    if gzip:
        shell_exec("/usr/bin/mysqldump %s | gzip > %s" % (db,path), True)
    else:
        shell_exec("/usr/bin/mysqldump %s > %s" % (db,path), True)

def mysql_import_from_dump(db,path,gzip):
    if gzip:
        shell_exec("zcat %s | mysql %s" % (path,db), True)
    else:
        shell_exec("cat %s | mysql %s" % (path,db), True)

def db_exists(db):
    res, out = shell_exec("echo \"SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '%s';\" | mysql -s" % db, True)
    if out.strip() == db:
        return True
    else:
        return False

def git_repo_clone(user,repo,path):
    res,out = shell_exec(["git","clone","-q",repo,path])
    shell_exec(["chown","-R","%s:" % user,path])

def git_branch_get(path):
    res,out = shell_exec("cd %s; git rev-parse --abbrev-ref HEAD" % path, True)
    return out.strip()

def git_local_changes(path):
    res,out = shell_exec("cd %s; git st -s" % path, True)
    return out.strip()

def git_remote(path):
    res,out = shell_exec("cd %s; git remote -v" % path, True)
    return out.strip()

# ===========================================
# Module execution.
#

def main():
    module = AnsibleModule(
        argument_spec = dict(
            action=dict(required=True),
            user=dict(default=None),
            passwd=dict(default=None),
            group=dict(default=None),
            db=dict(default=None),
            path=dict(default=None),
            gzip=dict(default=None),
            repo=dict(default=None),
        )
    )
    action = module.params["action"]
    user = module.params["user"]
    passwd = module.params["passwd"]
    group = module.params["group"]
    db = module.params["db"]
    path = module.params["path"]
    gzip = module.params["gzip"]
    repo = module.params["repo"]

    if action == "usercreate":
        if user is not None and passwd is not None:
            user_create(module,user,passwd)
        else:
            module.fail_json(msg="user and passwd required when creating a user")
    elif action == "userdel":
        if user is not None:
            user_delete(user)
        else:
            module.fail_json(msg="user required when deleting a user")
    elif action == "userremovefromgroup":
        if user is not None and group is not None:
            user_remove_from_group(user, group)
        else:
            module.fail_json(msg="user and group required when removing user from group")
    elif action == "userisloggedin":
        if user is not None:
            module.exit_json(loggedin=user_is_logged_in(user))
        else:
            module.fail_json(msg="user required when checking logged in status")
    elif action == "usergetid":
        if user is not None:
            id = user_get_id(user)
            if id:
                module.exit_json(id=id,msg="id retrieved")
            else:
                module.fail_json(msg="error retreiving user id")
        else:
            module.fail_json(msg="user required when getting user id")
    elif action == "userexists":
        if user is not None:
            module.exit_json(exists=user_exists(user))
        else:
            module.fail_json(msg="user required when checking exists")
    elif action == "usersgetall":
        module.exit_json(users=user_get_all())

    elif action == "mysqldumptofile":
        if db is not None and path is not None and gzip is not None:
            mysql_dump_to_file(db,path,gzip)
        else:
            module.fail_json(msg="need a db,path and gzip parameter for dumping db")
    elif action == "mysqlimportfromdump":
        if db is not None and path is not None and gzip is not None:
            mysql_import_from_dump(db,path,gzip)
        else:
            module.fail_json(msg="need a db,path and gzip parameter for dumping db")
    elif action == "mysqldbexists":
        if db is not None:
            module.exit_json(exists=db_exists(db))
        else:
            module.fail_json(msg="need a db parameter")

    elif action == "gitrepoclone":
        git_repo_clone(user,repo,path)
    elif action == "gitbranchget":
        module.exit_json(branch=git_branch_get(path))
    elif action == "gitlocalchanges":
        module.exit_json(changes=git_local_changes(path))
    elif action == "gitremote":
        module.exit_json(remote=git_remote(path))

    else:
        module.fail_json(msg="unknown action")

    module.exit_json(msg="finished")


# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
